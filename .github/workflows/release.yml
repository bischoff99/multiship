name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  # Quality checks before release
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: pnpm --filter @pkg/providers test

      - name: Run type checking
        run: pnpm --recursive --parallel exec tsc --noEmit

      - name: Run linting
        run: pnpm --recursive --parallel exec eslint . --ext .ts,.tsx,.js,.jsx

      - name: Build all packages
        run: pnpm --recursive build

      - name: Get version from tag or input
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
            if [[ -z "$VERSION" ]]; then
              echo "Error: Version must be provided for manual release"
              exit 1
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Build and publish packages
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: quality-checks
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm --recursive build

      - name: Publish @pkg/db
        run: pnpm --filter @pkg/db publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish @pkg/providers
        run: pnpm --filter @pkg/providers publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: quality-checks
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: |
          pnpm --filter @app/api build
          pnpm --filter @app/web build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: multiship/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: multiship/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [quality-checks, publish-packages, build-docker]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog since last tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [[ -n "$PREVIOUS_TAG" ]]; then
              echo "## Changes since $PREVIOUS_TAG" >> changelog.md
              git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
            else
              echo "## Initial Release" >> changelog.md
            fi
          else
            echo "## Manual Release ${{ github.event.inputs.version }}" >> changelog.md
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.quality-checks.outputs.version }}
          release_name: Release ${{ needs.quality-checks.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.quality-checks.outputs.version, 'alpha') || contains(needs.quality-checks.outputs.version, 'beta') || contains(needs.quality-checks.outputs.version, 'rc') }}

  # Post-release notifications
  post-release:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [github-release]
    if: always()

    steps:
      - name: Notify success
        if: needs.github-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.quality-checks.outputs.version }} published successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Published Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 NPM packages: @pkg/db, @pkg/providers" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker images: multiship/api, multiship/web" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.quality-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release ${{ needs.quality-checks.outputs.version }} failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed jobs and retry the release." >> $GITHUB_STEP_SUMMARY