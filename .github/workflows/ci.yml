name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Main CI pipeline
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: multiship_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm --filter @pkg/db db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/multiship_test"

      - name: Generate Prisma client
        run: pnpm --filter @pkg/db db:generate

      - name: Run type checking
        run: pnpm --recursive --parallel exec tsc --noEmit

      - name: Run linting
        run: pnpm --recursive --parallel exec eslint . --ext .ts,.tsx,.js,.jsx

      - name: Run tests with coverage
        run: pnpm --filter @pkg/providers test:coverage
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/multiship_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Run unit tests (parallel)
        run: pnpm --filter @pkg/providers test:unit

      - name: Run integration tests
        run: pnpm --filter @pkg/providers test:integration
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/multiship_test"

      - name: Build all packages
        run: pnpm --recursive build

      - name: Build API application
        run: pnpm --filter @app/api build

      - name: Build Web application
        run: pnpm --filter @app/web build

      - name: Test Docker build (API)
        run: docker build -f apps/api/Dockerfile -t multiship-api:test .

      - name: Test Docker build (Web)
        run: docker build -f apps/web/Dockerfile -t multiship-web:test .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./packages/providers/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Docker Compose integration test
  docker-integration:
    name: Docker Compose Integration
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker-compose up -d db redis
          docker-compose ps

      - name: Wait for services
        run: |
          timeout 60s bash -c 'until docker-compose exec -T db pg_isready -U postgres; do sleep 2; done'
          timeout 30s bash -c 'until docker-compose exec -T redis redis-cli ping | grep PONG; do sleep 2; done'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database with Docker Compose
        run: |
          pnpm --filter @pkg/db db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/multiship"

      - name: Run full test suite
        run: pnpm --filter @pkg/providers test
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/multiship"
          REDIS_URL: "redis://localhost:6379"

      - name: Cleanup
        run: docker-compose down -v
        if: always()